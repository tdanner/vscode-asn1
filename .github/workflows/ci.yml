name: CI

on:
  push:
    branches:
      - main
    tags:
      - "v*"

permissions:
  contents: write

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
          - macos-latest
          - windows-latest

    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"

      - name: Align package version with tag
        if: startsWith(github.ref, 'refs/tags/')
        shell: bash
        env:
          RAW_VERSION: ${{ github.ref_name }}
        run: |
          node <<'NODE'
          const fs = require('fs');
          const path = require('path');

          const raw = process.env.RAW_VERSION;
          if (!raw) {
            throw new Error('RAW_VERSION environment variable is required');
          }

          const tagName = raw.replace(/^refs\/tags\//, '');
          const version = tagName.replace(/^[vV]/, '').replace(/^\.+/, '');
          const semverPattern = /^[0-9]+(?:\.[0-9]+){2}(?:-[0-9A-Za-z.-]+)?(?:\+[0-9A-Za-z.-]+)?$/;

          if (!semverPattern.test(version)) {
            throw new Error(`Tag "${raw}" does not yield a valid semver version (got "${version}")`);
          }

          console.log(`Setting package version to ${version}`);

          const updateJson = (file) => {
            if (!fs.existsSync(file)) return;
            const contents = fs.readFileSync(file, 'utf8');
            const json = JSON.parse(contents);

            const applyVersion = (obj) => {
              if (obj && typeof obj === 'object' && 'version' in obj) {
                obj.version = version;
              }
            };

            applyVersion(json);
            if (json.packages && typeof json.packages === 'object') {
              const rootPackage = json.packages[''] || json.packages[path.normalize('')];
              applyVersion(rootPackage);
            }

            fs.writeFileSync(file, JSON.stringify(json, null, 2) + '\n');
            console.log(`Updated ${file} to version ${version}`);
          };

          ['package.json', 'package-lock.json'].forEach(updateJson);
          NODE

      - name: Generate changelog from release notes
        if: runner.os == 'Linux' && startsWith(github.ref, 'refs/tags/')
        env:
          RAW_VERSION: ${{ github.ref_name }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: node scripts/generate-changelog-from-release.mjs

      - name: Start xvfb
        if: runner.os == 'Linux'
        run: |
          /usr/bin/Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &
          echo "Started xvfb"

      - name: Install dependencies
        run: npm ci

      - name: Compile extension
        run: npm run compile

      - name: Run tests
        shell: bash
        run: |
          if [ "${{ runner.os }}" = "Linux" ]; then
            export DISPLAY=:99.0
          fi
          npm test

      - name: Remove old package
        if: runner.os == 'Linux'
        shell: bash
        run: rm -f ./*.vsix

      - name: Build VSIX
        if: runner.os == 'Linux'
        run: npm run package

      - name: Upload VSIX artifact
        if: runner.os == 'Linux'
        uses: actions/upload-artifact@v4
        with:
          name: vscode-asn1-vsix
          path: "*.vsix"

      - name: Upload VSIX to GitHub Release
        if: runner.os == 'Linux' && startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v2
        with:
          files: "*.vsix"

name: CI

on:
  push:
    branches:
      - main
    tags:
      - "v*"

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
          - macos-latest
          - windows-latest

    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"

      - name: Align package version with tag
        if: startsWith(github.ref, 'refs/tags/')
        shell: bash
        env:
          RAW_VERSION: ${{ github.ref_name }}
        run: |
          VERSION="${RAW_VERSION#v}"
          export VERSION
          echo "Setting package version to ${VERSION}"
          node <<'NODE'
            const fs = require('fs');
            const version = process.env.VERSION;
            if (!version) {
              throw new Error('VERSION environment variable is required');
            }
            for (const file of ['package.json', 'package-lock.json']) {
              if (!fs.existsSync(file)) continue;
              const contents = fs.readFileSync(file, 'utf8');
              const json = JSON.parse(contents);
              if (json.version === version) continue;
              json.version = version;
              fs.writeFileSync(file, JSON.stringify(json, null, 2) + '\n');
              console.log(`Updated ${file} to version ${version}`);
            }
            NODE

      - name: Start xvfb
        if: runner.os == 'Linux'
        run: |
          /usr/bin/Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &
          echo "Started xvfb"

      - name: Install dependencies
        run: npm ci

      - name: Compile extension
        run: npm run compile

      - name: Run tests
        shell: bash
        run: |
          if [ "${{ runner.os }}" = "Linux" ]; then
            export DISPLAY=:99.0
          fi
          npm test

      - name: Remove old package
        if: runner.os == 'Linux'
        shell: bash
        run: rm -f ./*.vsix

      - name: Build VSIX
        if: runner.os == 'Linux'
        run: npm run package

      - name: Upload VSIX artifact
        if: runner.os == 'Linux'
        uses: actions/upload-artifact@v4
        with:
          name: vscode-asn1-vsix
          path: "*.vsix"

      - name: Upload VSIX to GitHub Release
        if: runner.os == 'Linux' && startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v2
        with:
          files: "*.vsix"
